# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gchat_pb2 as gchat__pb2


class ChatStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SingleCall = channel.unary_unary(
                '/greet.Chat/SingleCall',
                request_serializer=gchat__pb2.ChatRequest.SerializeToString,
                response_deserializer=gchat__pb2.ChatReply.FromString,
                )
        self.StreamToClient = channel.unary_stream(
                '/greet.Chat/StreamToClient',
                request_serializer=gchat__pb2.ChatRequest.SerializeToString,
                response_deserializer=gchat__pb2.ChatReply.FromString,
                )
        self.StreamToServer = channel.stream_unary(
                '/greet.Chat/StreamToServer',
                request_serializer=gchat__pb2.ChatRequest.SerializeToString,
                response_deserializer=gchat__pb2.DelayedReply.FromString,
                )
        self.MutualStream = channel.stream_stream(
                '/greet.Chat/MutualStream',
                request_serializer=gchat__pb2.ChatRequest.SerializeToString,
                response_deserializer=gchat__pb2.ChatReply.FromString,
                )


class ChatServicer(object):
    """The greeting service definition.
    """

    def SingleCall(self, request, context):
        """single call
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamToClient(self, request, context):
        """Server Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamToServer(self, request_iterator, context):
        """Client Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MutualStream(self, request_iterator, context):
        """Bi-directional Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SingleCall': grpc.unary_unary_rpc_method_handler(
                    servicer.SingleCall,
                    request_deserializer=gchat__pb2.ChatRequest.FromString,
                    response_serializer=gchat__pb2.ChatReply.SerializeToString,
            ),
            'StreamToClient': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamToClient,
                    request_deserializer=gchat__pb2.ChatRequest.FromString,
                    response_serializer=gchat__pb2.ChatReply.SerializeToString,
            ),
            'StreamToServer': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamToServer,
                    request_deserializer=gchat__pb2.ChatRequest.FromString,
                    response_serializer=gchat__pb2.DelayedReply.SerializeToString,
            ),
            'MutualStream': grpc.stream_stream_rpc_method_handler(
                    servicer.MutualStream,
                    request_deserializer=gchat__pb2.ChatRequest.FromString,
                    response_serializer=gchat__pb2.ChatReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'greet.Chat', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Chat(object):
    """The greeting service definition.
    """

    @staticmethod
    def SingleCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/greet.Chat/SingleCall',
            gchat__pb2.ChatRequest.SerializeToString,
            gchat__pb2.ChatReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamToClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/greet.Chat/StreamToClient',
            gchat__pb2.ChatRequest.SerializeToString,
            gchat__pb2.ChatReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamToServer(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/greet.Chat/StreamToServer',
            gchat__pb2.ChatRequest.SerializeToString,
            gchat__pb2.DelayedReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MutualStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/greet.Chat/MutualStream',
            gchat__pb2.ChatRequest.SerializeToString,
            gchat__pb2.ChatReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
